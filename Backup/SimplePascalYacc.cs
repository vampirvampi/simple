// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  MIKS
// DateTime: 01.09.2011 10:24:49
// UserName: Stanislav
// Input file <SimplePascal.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using PascalABCCompiler.SyntaxTree;
using SimplePascalParser;

namespace GPPGParserScanner
{
public enum Tokens {
    error=1,EOF=2,ID=3,INTNUM=4,REALNUM=5,CHARACTER=6,
    TRUE=7,FALSE=8,PLUS=9,MINUS=10,MULT=11,DIVIDE=12,
    DIV=13,MOD=14,AND=15,OR=16,LT=17,GT=18,
    LE=19,GE=20,EQ=21,NE=22,NOT=23,ASSIGN=24,
    SEMICOLUMN=25,LPAREN=26,RPAREN=27,COMMA=28,DOT=29,COLON=30,
    WRITE=31,ODD=32,BOOLEAN=33,INTEGER=34,REAL=35,CHAR=36,
    IF=37,THEN=38,ELSE=39,BEGIN=40,END=41,WHILE=42,
    DO=43,PROGRAM=44,CONST=45,VAR=46,FOR=47,TO=48,
    STEP=49,INVISIBLE=50,PROCEDURE=51,UMINUS=52};

public struct ValueType
{ 
		public bool bVal; 
		public string sVal; 
		public int iVal;
		public double rVal;
		public char cVal; 
		public named_type_reference ntr;
		public ident_list il;
		public var_def_statement vds;
		public variable_definitions vdss;
		public expression ex;
		public expression_list el;
		public ident id;
		public block bl;
		public statement st;
		public statement_list sl;
		public declarations decl;
		public Operators op;
		public simple_const_definition scd;
		public consts_definitions_list cdl;
		public declaration decsec;
		public procedure_definition pd;
	}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class GPPGParser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SimplePascal.y
// Эти объявления добавляются в класс GPPGParser, представляющий собой парсер, генерируемый системой gppg
    public syntax_tree_node root; // Корневой узел синтаксического дерева 
    public GPPGParser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from SimplePascal.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[77];
  private static State[] states = new State[145];
  private static string[] nonTerms = new string[] {
      "module", "ident", "type", "expr", "ConstExpr", "Assignment", "IfStatement", 
      "WhileStatement", "Statement", "BlockStatement", "ForStatement", "EmptyStatement", 
      "ProcCallStatement", "StatementSequence", "Declarations", "factparams", 
      "IDList", "VarDecl", "VarDeclarations", "VarDeclarationsSect", "ConstDecl", 
      "ConstDeclarations", "ConstDeclarationsSect", "ProcedureDeclarationSect", 
      "DeclarationsSect", "mainblock", "maybevar", "$accept", "maybeformalparams", 
      "maybereturn", "FPList", "FPSect", };

  static GPPGParser() {
    states[0] = new State(new int[]{44,3},new int[]{-1,1});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{3,47},new int[]{-2,4});
    states[4] = new State(new int[]{25,5});
    states[5] = new State(-65,new int[]{-26,6,-15,8});
    states[6] = new State(new int[]{29,7});
    states[7] = new State(-2);
    states[8] = new State(new int[]{40,9,46,98,45,114,51,124},new int[]{-25,96,-20,97,-23,113,-24,123});
    states[9] = new State(new int[]{3,47,37,67,42,74,40,81,47,86,41,-36,25,-36},new int[]{-14,10,-9,84,-6,14,-2,15,-7,66,-8,73,-13,78,-12,79,-10,80,-11,85});
    states[10] = new State(new int[]{41,11,25,12});
    states[11] = new State(-4);
    states[12] = new State(new int[]{3,47,37,67,42,74,40,81,47,86,41,-36,25,-36},new int[]{-9,13,-6,14,-2,15,-7,66,-8,73,-13,78,-12,79,-10,80,-11,85});
    states[13] = new State(-46);
    states[14] = new State(-37);
    states[15] = new State(new int[]{24,16,26,60});
    states[16] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-4,17,-2,46});
    states[17] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,21,34,22,36,17,38,19,40,18,42,20,44,41,-28,25,-28,39,-28});
    states[18] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-4,19,-2,46});
    states[19] = new State(new int[]{9,-14,10,-14,11,22,12,24,13,26,14,28,15,30,16,-14,21,-14,22,-14,17,-14,19,-14,18,-14,20,-14,41,-14,25,-14,39,-14,27,-14,28,-14,38,-14,43,-14,48,-14,49,-14});
    states[20] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-4,21,-2,46});
    states[21] = new State(new int[]{9,-15,10,-15,11,22,12,24,13,26,14,28,15,30,16,-15,21,-15,22,-15,17,-15,19,-15,18,-15,20,-15,41,-15,25,-15,39,-15,27,-15,28,-15,38,-15,43,-15,48,-15,49,-15});
    states[22] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-4,23,-2,46});
    states[23] = new State(-16);
    states[24] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-4,25,-2,46});
    states[25] = new State(-17);
    states[26] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-4,27,-2,46});
    states[27] = new State(-18);
    states[28] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-4,29,-2,46});
    states[29] = new State(-19);
    states[30] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-4,31,-2,46});
    states[31] = new State(-20);
    states[32] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-4,33,-2,46});
    states[33] = new State(new int[]{9,-21,10,-21,11,22,12,24,13,26,14,28,15,30,16,-21,21,-21,22,-21,17,-21,19,-21,18,-21,20,-21,41,-21,25,-21,39,-21,27,-21,28,-21,38,-21,43,-21,48,-21,49,-21});
    states[34] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-4,35,-2,46});
    states[35] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,21,-22,22,-22,17,-22,19,-22,18,-22,20,-22,41,-22,25,-22,39,-22,27,-22,28,-22,38,-22,43,-22,48,-22,49,-22});
    states[36] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-4,37,-2,46});
    states[37] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,21,-23,22,-23,17,-23,19,-23,18,-23,20,-23,41,-23,25,-23,39,-23,27,-23,28,-23,38,-23,43,-23,48,-23,49,-23});
    states[38] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-4,39,-2,46});
    states[39] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,21,-24,22,-24,17,-24,19,-24,18,-24,20,-24,41,-24,25,-24,39,-24,27,-24,28,-24,38,-24,43,-24,48,-24,49,-24});
    states[40] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-4,41,-2,46});
    states[41] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,21,-25,22,-25,17,-25,19,-25,18,-25,20,-25,41,-25,25,-25,39,-25,27,-25,28,-25,38,-25,43,-25,48,-25,49,-25});
    states[42] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-4,43,-2,46});
    states[43] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,21,-26,22,-26,17,-26,19,-26,18,-26,20,-26,41,-26,25,-26,39,-26,27,-26,28,-26,38,-26,43,-26,48,-26,49,-26});
    states[44] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-4,45,-2,46});
    states[45] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,21,-27,22,-27,17,-27,19,-27,18,-27,20,-27,41,-27,25,-27,39,-27,27,-27,28,-27,38,-27,43,-27,48,-27,49,-27});
    states[46] = new State(-5);
    states[47] = new State(-3);
    states[48] = new State(-6);
    states[49] = new State(-7);
    states[50] = new State(-8);
    states[51] = new State(-9);
    states[52] = new State(-10);
    states[53] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-4,54,-2,46});
    states[54] = new State(-11);
    states[55] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-4,56,-2,46});
    states[56] = new State(new int[]{27,57,9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,21,34,22,36,17,38,19,40,18,42,20,44});
    states[57] = new State(-12);
    states[58] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-4,59,-2,46});
    states[59] = new State(-13);
    states[60] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-16,61,-4,65,-2,46});
    states[61] = new State(new int[]{27,62,28,63});
    states[62] = new State(-35);
    states[63] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-4,64,-2,46});
    states[64] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,21,34,22,36,17,38,19,40,18,42,20,44,27,-34,28,-34});
    states[65] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,21,34,22,36,17,38,19,40,18,42,20,44,27,-33,28,-33});
    states[66] = new State(-38);
    states[67] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-4,68,-2,46});
    states[68] = new State(new int[]{38,69,9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,21,34,22,36,17,38,19,40,18,42,20,44});
    states[69] = new State(new int[]{3,47,37,67,42,74,40,81,47,86,39,-36,41,-36,25,-36},new int[]{-9,70,-6,14,-2,15,-7,66,-8,73,-13,78,-12,79,-10,80,-11,85});
    states[70] = new State(new int[]{39,71,41,-29,25,-29});
    states[71] = new State(new int[]{3,47,37,67,42,74,40,81,47,86,39,-36,41,-36,25,-36},new int[]{-9,72,-6,14,-2,15,-7,66,-8,73,-13,78,-12,79,-10,80,-11,85});
    states[72] = new State(-30);
    states[73] = new State(-39);
    states[74] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-4,75,-2,46});
    states[75] = new State(new int[]{43,76,9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,21,34,22,36,17,38,19,40,18,42,20,44});
    states[76] = new State(new int[]{3,47,37,67,42,74,40,81,47,86,39,-36,41,-36,25,-36},new int[]{-9,77,-6,14,-2,15,-7,66,-8,73,-13,78,-12,79,-10,80,-11,85});
    states[77] = new State(-31);
    states[78] = new State(-40);
    states[79] = new State(-41);
    states[80] = new State(-42);
    states[81] = new State(new int[]{3,47,37,67,42,74,40,81,47,86,41,-36,25,-36},new int[]{-14,82,-9,84,-6,14,-2,15,-7,66,-8,73,-13,78,-12,79,-10,80,-11,85});
    states[82] = new State(new int[]{41,83,25,12});
    states[83] = new State(-44);
    states[84] = new State(-45);
    states[85] = new State(-43);
    states[86] = new State(new int[]{3,47},new int[]{-2,87});
    states[87] = new State(new int[]{24,88});
    states[88] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-4,89,-2,46});
    states[89] = new State(new int[]{48,90,9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,21,34,22,36,17,38,19,40,18,42,20,44});
    states[90] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-4,91,-2,46});
    states[91] = new State(new int[]{49,92,9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,21,34,22,36,17,38,19,40,18,42,20,44});
    states[92] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-4,93,-2,46});
    states[93] = new State(new int[]{43,94,9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,21,34,22,36,17,38,19,40,18,42,20,44});
    states[94] = new State(new int[]{3,47,37,67,42,74,40,81,47,86,39,-36,41,-36,25,-36},new int[]{-9,95,-6,14,-2,15,-7,66,-8,73,-13,78,-12,79,-10,80,-11,85});
    states[95] = new State(-32);
    states[96] = new State(-66);
    states[97] = new State(-62);
    states[98] = new State(new int[]{3,47},new int[]{-19,99,-18,112,-17,101,-2,111});
    states[99] = new State(new int[]{3,47,40,-61,46,-61,45,-61,51,-61},new int[]{-18,100,-17,101,-2,111});
    states[100] = new State(-55);
    states[101] = new State(new int[]{30,102,28,109});
    states[102] = new State(new int[]{33,105,34,106,35,107,36,108},new int[]{-3,103});
    states[103] = new State(new int[]{25,104});
    states[104] = new State(-53);
    states[105] = new State(-47);
    states[106] = new State(-48);
    states[107] = new State(-49);
    states[108] = new State(-50);
    states[109] = new State(new int[]{3,47},new int[]{-2,110});
    states[110] = new State(-52);
    states[111] = new State(-51);
    states[112] = new State(-54);
    states[113] = new State(-63);
    states[114] = new State(new int[]{3,47},new int[]{-22,115,-21,122,-2,117});
    states[115] = new State(new int[]{3,47,40,-60,46,-60,45,-60,51,-60},new int[]{-21,116,-2,117});
    states[116] = new State(-59);
    states[117] = new State(new int[]{21,118});
    states[118] = new State(new int[]{3,47,4,48,5,49,6,50,7,51,8,52,10,53,26,55,23,58},new int[]{-5,119,-4,121,-2,46});
    states[119] = new State(new int[]{25,120});
    states[120] = new State(-56);
    states[121] = new State(new int[]{9,18,10,20,11,22,12,24,13,26,14,28,15,30,16,32,21,34,22,36,17,38,19,40,18,42,20,44,25,-57});
    states[122] = new State(-58);
    states[123] = new State(-64);
    states[124] = new State(new int[]{3,47},new int[]{-2,125});
    states[125] = new State(new int[]{26,134,28,-68,25,-68},new int[]{-29,126});
    states[126] = new State(new int[]{28,132,25,-70},new int[]{-30,127});
    states[127] = new State(new int[]{25,128});
    states[128] = new State(-65,new int[]{-26,129,-15,8});
    states[129] = new State(new int[]{3,47},new int[]{-2,130});
    states[130] = new State(new int[]{25,131});
    states[131] = new State(-67);
    states[132] = new State(new int[]{33,105,34,106,35,107,36,108},new int[]{-3,133});
    states[133] = new State(-71);
    states[134] = new State(new int[]{46,143,3,-75},new int[]{-31,135,-32,144,-27,139});
    states[135] = new State(new int[]{27,136,25,137});
    states[136] = new State(-69);
    states[137] = new State(new int[]{46,143,3,-75},new int[]{-32,138,-27,139});
    states[138] = new State(-73);
    states[139] = new State(new int[]{3,47},new int[]{-17,140,-2,111});
    states[140] = new State(new int[]{30,141,28,109});
    states[141] = new State(new int[]{33,105,34,106,35,107,36,108},new int[]{-3,142});
    states[142] = new State(-74);
    states[143] = new State(-76);
    states[144] = new State(-72);

    rules[1] = new Rule(-28, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{44,-2,25,-26,29});
    rules[3] = new Rule(-2, new int[]{3});
    rules[4] = new Rule(-26, new int[]{-15,40,-14,41});
    rules[5] = new Rule(-4, new int[]{-2});
    rules[6] = new Rule(-4, new int[]{4});
    rules[7] = new Rule(-4, new int[]{5});
    rules[8] = new Rule(-4, new int[]{6});
    rules[9] = new Rule(-4, new int[]{7});
    rules[10] = new Rule(-4, new int[]{8});
    rules[11] = new Rule(-4, new int[]{10,-4});
    rules[12] = new Rule(-4, new int[]{26,-4,27});
    rules[13] = new Rule(-4, new int[]{23,-4});
    rules[14] = new Rule(-4, new int[]{-4,9,-4});
    rules[15] = new Rule(-4, new int[]{-4,10,-4});
    rules[16] = new Rule(-4, new int[]{-4,11,-4});
    rules[17] = new Rule(-4, new int[]{-4,12,-4});
    rules[18] = new Rule(-4, new int[]{-4,13,-4});
    rules[19] = new Rule(-4, new int[]{-4,14,-4});
    rules[20] = new Rule(-4, new int[]{-4,15,-4});
    rules[21] = new Rule(-4, new int[]{-4,16,-4});
    rules[22] = new Rule(-4, new int[]{-4,21,-4});
    rules[23] = new Rule(-4, new int[]{-4,22,-4});
    rules[24] = new Rule(-4, new int[]{-4,17,-4});
    rules[25] = new Rule(-4, new int[]{-4,19,-4});
    rules[26] = new Rule(-4, new int[]{-4,18,-4});
    rules[27] = new Rule(-4, new int[]{-4,20,-4});
    rules[28] = new Rule(-6, new int[]{-2,24,-4});
    rules[29] = new Rule(-7, new int[]{37,-4,38,-9});
    rules[30] = new Rule(-7, new int[]{37,-4,38,-9,39,-9});
    rules[31] = new Rule(-8, new int[]{42,-4,43,-9});
    rules[32] = new Rule(-11, new int[]{47,-2,24,-4,48,-4,49,-4,43,-9});
    rules[33] = new Rule(-16, new int[]{-4});
    rules[34] = new Rule(-16, new int[]{-16,28,-4});
    rules[35] = new Rule(-13, new int[]{-2,26,-16,27});
    rules[36] = new Rule(-12, new int[]{});
    rules[37] = new Rule(-9, new int[]{-6});
    rules[38] = new Rule(-9, new int[]{-7});
    rules[39] = new Rule(-9, new int[]{-8});
    rules[40] = new Rule(-9, new int[]{-13});
    rules[41] = new Rule(-9, new int[]{-12});
    rules[42] = new Rule(-9, new int[]{-10});
    rules[43] = new Rule(-9, new int[]{-11});
    rules[44] = new Rule(-10, new int[]{40,-14,41});
    rules[45] = new Rule(-14, new int[]{-9});
    rules[46] = new Rule(-14, new int[]{-14,25,-9});
    rules[47] = new Rule(-3, new int[]{33});
    rules[48] = new Rule(-3, new int[]{34});
    rules[49] = new Rule(-3, new int[]{35});
    rules[50] = new Rule(-3, new int[]{36});
    rules[51] = new Rule(-17, new int[]{-2});
    rules[52] = new Rule(-17, new int[]{-17,28,-2});
    rules[53] = new Rule(-18, new int[]{-17,30,-3,25});
    rules[54] = new Rule(-19, new int[]{-18});
    rules[55] = new Rule(-19, new int[]{-19,-18});
    rules[56] = new Rule(-21, new int[]{-2,21,-5,25});
    rules[57] = new Rule(-5, new int[]{-4});
    rules[58] = new Rule(-22, new int[]{-21});
    rules[59] = new Rule(-22, new int[]{-22,-21});
    rules[60] = new Rule(-23, new int[]{45,-22});
    rules[61] = new Rule(-20, new int[]{46,-19});
    rules[62] = new Rule(-25, new int[]{-20});
    rules[63] = new Rule(-25, new int[]{-23});
    rules[64] = new Rule(-25, new int[]{-24});
    rules[65] = new Rule(-15, new int[]{});
    rules[66] = new Rule(-15, new int[]{-15,-25});
    rules[67] = new Rule(-24, new int[]{51,-2,-29,-30,25,-26,-2,25});
    rules[68] = new Rule(-29, new int[]{});
    rules[69] = new Rule(-29, new int[]{26,-31,27});
    rules[70] = new Rule(-30, new int[]{});
    rules[71] = new Rule(-30, new int[]{28,-3});
    rules[72] = new Rule(-31, new int[]{-32});
    rules[73] = new Rule(-31, new int[]{-31,25,-32});
    rules[74] = new Rule(-32, new int[]{-27,-17,30,-3});
    rules[75] = new Rule(-27, new int[]{});
    rules[76] = new Rule(-27, new int[]{46});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // module -> PROGRAM, ident, SEMICOLUMN, mainblock, DOT
{
		// Подключение стандартного модуля Oberon00System, написанного на PascalABC.NET
		// var ul = new uses_list("SimplePascalSystem");
		
		// Формирование модуля основной программы (используется фабричный метод вместо конструктора)
		root = program_module.create(ValueStack[ValueStack.Depth-4].id, null, ValueStack[ValueStack.Depth-2].bl, CurrentLocationSpan);
    }
        break;
      case 3: // ident -> ID
{
		CurrentSemanticValue.id = new ident(ValueStack[ValueStack.Depth-1].sVal,CurrentLocationSpan); 
	}
        break;
      case 4: // mainblock -> Declarations, BEGIN, StatementSequence, END
{
		CurrentSemanticValue.bl = new block(ValueStack[ValueStack.Depth-4].decl, ValueStack[ValueStack.Depth-2].sl, CurrentLocationSpan);
	}
        break;
      case 5: // expr -> ident
{
		CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id;
	}
        break;
      case 6: // expr -> INTNUM
{ 
		CurrentSemanticValue.ex = new int32_const(ValueStack[ValueStack.Depth-1].iVal,CurrentLocationSpan); 		
	}
        break;
      case 7: // expr -> REALNUM
{ 
		CurrentSemanticValue.ex = new double_const(ValueStack[ValueStack.Depth-1].rVal,CurrentLocationSpan); 		
	}
        break;
      case 8: // expr -> CHARACTER
{ 
		CurrentSemanticValue.ex = new char_const(ValueStack[ValueStack.Depth-1].cVal,CurrentLocationSpan); 		
	}
        break;
      case 9: // expr -> TRUE
{
		CurrentSemanticValue.ex = new bool_const(true,CurrentLocationSpan);
	}
        break;
      case 10: // expr -> FALSE
{
		CurrentSemanticValue.ex = new bool_const(false,CurrentLocationSpan);
	}
        break;
      case 11: // expr -> MINUS, expr
{
		CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex,Operators.Minus,CurrentLocationSpan);
	}
        break;
      case 12: // expr -> LPAREN, expr, RPAREN
{CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-2].ex;}
        break;
      case 13: // expr -> NOT, expr
{
		CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex,Operators.LogicalNOT,CurrentLocationSpan);
	}
        break;
      case 14: // expr -> expr, PLUS, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.Plus,CurrentLocationSpan);
	}
        break;
      case 15: // expr -> expr, MINUS, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.Minus,CurrentLocationSpan);
	}
        break;
      case 16: // expr -> expr, MULT, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.Multiplication,CurrentLocationSpan);
	}
        break;
      case 17: // expr -> expr, DIVIDE, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.Division,CurrentLocationSpan);
	}
        break;
      case 18: // expr -> expr, DIV, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.IntegerDivision,CurrentLocationSpan);
	}
        break;
      case 19: // expr -> expr, MOD, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.ModulusRemainder,CurrentLocationSpan);
	}
        break;
      case 20: // expr -> expr, AND, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.LogicalAND,CurrentLocationSpan);
	}
        break;
      case 21: // expr -> expr, OR, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.LogicalOR,CurrentLocationSpan);
	}
        break;
      case 22: // expr -> expr, EQ, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.Equal,CurrentLocationSpan);
	}
        break;
      case 23: // expr -> expr, NE, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.NotEqual,CurrentLocationSpan);
	}
        break;
      case 24: // expr -> expr, LT, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.Less,CurrentLocationSpan);
	}
        break;
      case 25: // expr -> expr, LE, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.LessEqual,CurrentLocationSpan);
	}
        break;
      case 26: // expr -> expr, GT, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.Greater,CurrentLocationSpan);
	}
        break;
      case 27: // expr -> expr, GE, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.GreaterEqual,CurrentLocationSpan);
	}
        break;
      case 28: // Assignment -> ident, ASSIGN, expr
{
		CurrentSemanticValue.st = new assign(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].ex, Operators.Assignment,CurrentLocationSpan);
	}
        break;
      case 29: // IfStatement -> IF, expr, THEN, Statement
{
		CurrentSemanticValue.st = new if_node(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].st, null, CurrentLocationSpan);
	}
        break;
      case 30: // IfStatement -> IF, expr, THEN, Statement, ELSE, Statement
{
		CurrentSemanticValue.st = new if_node(ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-3].st, ValueStack[ValueStack.Depth-1].st, CurrentLocationSpan);
	}
        break;
      case 31: // WhileStatement -> WHILE, expr, DO, Statement
{
		CurrentSemanticValue.st = new while_node(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].st, WhileCycleType.While, CurrentLocationSpan);
	}
        break;
      case 32: // ForStatement -> FOR, ident, ASSIGN, expr, TO, expr, STEP, expr, DO, Statement
{
		statement st0 = new assign(ValueStack[ValueStack.Depth-9].id, ValueStack[ValueStack.Depth-7].ex, Operators.Assignment);
		expression ex2 = new bin_expr(ValueStack[ValueStack.Depth-9].id, ValueStack[ValueStack.Depth-3].ex, Operators.Plus);
		statement s = new assign(ValueStack[ValueStack.Depth-9].id, ex2, Operators.Assignment);
		expression ex1 = new bin_expr(ValueStack[ValueStack.Depth-9].id, ValueStack[ValueStack.Depth-5].ex, Operators.Less);
		statement_list sl = new statement_list(ValueStack[ValueStack.Depth-1].st,CurrentLocationSpan);
		sl.Add(s);
		CurrentSemanticValue.st = new while_node(ex1, sl, WhileCycleType.While, CurrentLocationSpan);
		statement_list sl1 = new statement_list(st0,CurrentLocationSpan);
		sl1.Add(CurrentSemanticValue.st);
		CurrentSemanticValue.st = sl1;
	}
        break;
      case 33: // factparams -> expr
{
		CurrentSemanticValue.el = new expression_list(ValueStack[ValueStack.Depth-1].ex,CurrentLocationSpan);
	}
        break;
      case 34: // factparams -> factparams, COMMA, expr
{
		ValueStack[ValueStack.Depth-3].el.Add(ValueStack[ValueStack.Depth-1].ex,CurrentLocationSpan);
		CurrentSemanticValue.el = ValueStack[ValueStack.Depth-3].el;
	}
        break;
      case 35: // ProcCallStatement -> ident, LPAREN, factparams, RPAREN
{
		CurrentSemanticValue.st = new method_call(ValueStack[ValueStack.Depth-4].id,ValueStack[ValueStack.Depth-2].el,CurrentLocationSpan);
	}
        break;
      case 36: // EmptyStatement -> /* empty */
{
		CurrentSemanticValue.st = new empty_statement();		
	}
        break;
      case 44: // BlockStatement -> BEGIN, StatementSequence, END
{CurrentSemanticValue.st = ValueStack[ValueStack.Depth-2].sl;}
        break;
      case 45: // StatementSequence -> Statement
{
		CurrentSemanticValue.sl = new statement_list(ValueStack[ValueStack.Depth-1].st,CurrentLocationSpan);
	}
        break;
      case 46: // StatementSequence -> StatementSequence, SEMICOLUMN, Statement
{
		ValueStack[ValueStack.Depth-3].sl.Add(ValueStack[ValueStack.Depth-1].st,CurrentLocationSpan);
		CurrentSemanticValue.sl = ValueStack[ValueStack.Depth-3].sl;
	}
        break;
      case 47: // type -> BOOLEAN
{
		CurrentSemanticValue.ntr = new named_type_reference("boolean",CurrentLocationSpan);
	}
        break;
      case 48: // type -> INTEGER
{
		CurrentSemanticValue.ntr = new named_type_reference("integer",CurrentLocationSpan);
	}
        break;
      case 49: // type -> REAL
{
		CurrentSemanticValue.ntr = new named_type_reference("real",CurrentLocationSpan);
	}
        break;
      case 50: // type -> CHAR
{
		CurrentSemanticValue.ntr = new named_type_reference("char",CurrentLocationSpan);
	}
        break;
      case 51: // IDList -> ident
{
		CurrentSemanticValue.il=new ident_list(ValueStack[ValueStack.Depth-1].id,CurrentLocationSpan);
	}
        break;
      case 52: // IDList -> IDList, COMMA, ident
{
		ValueStack[ValueStack.Depth-3].il.Add(ValueStack[ValueStack.Depth-1].id,CurrentLocationSpan);
		CurrentSemanticValue.il = ValueStack[ValueStack.Depth-3].il;
	}
        break;
      case 53: // VarDecl -> IDList, COLON, type, SEMICOLUMN
{
	  CurrentSemanticValue.vds  = new var_def_statement(ValueStack[ValueStack.Depth-4].il,ValueStack[ValueStack.Depth-2].ntr,null,definition_attribute.None,false,CurrentLocationSpan);
	}
        break;
      case 54: // VarDeclarations -> VarDecl
{
		CurrentSemanticValue.vdss = new variable_definitions(ValueStack[ValueStack.Depth-1].vds,CurrentLocationSpan);
	}
        break;
      case 55: // VarDeclarations -> VarDeclarations, VarDecl
{
		ValueStack[ValueStack.Depth-2].vdss.Add(ValueStack[ValueStack.Depth-1].vds,CurrentLocationSpan);
		CurrentSemanticValue.vdss = ValueStack[ValueStack.Depth-2].vdss;
	}
        break;
      case 56: // ConstDecl -> ident, EQ, ConstExpr, SEMICOLUMN
{
		CurrentSemanticValue.scd = new simple_const_definition(ValueStack[ValueStack.Depth-4].id,ValueStack[ValueStack.Depth-2].ex,CurrentLocationSpan);
	}
        break;
      case 58: // ConstDeclarations -> ConstDecl
{
		CurrentSemanticValue.cdl = new consts_definitions_list(ValueStack[ValueStack.Depth-1].scd,CurrentLocationSpan);
	}
        break;
      case 59: // ConstDeclarations -> ConstDeclarations, ConstDecl
{
		ValueStack[ValueStack.Depth-2].cdl.Add(ValueStack[ValueStack.Depth-1].scd,CurrentLocationSpan); 
		CurrentSemanticValue.cdl = ValueStack[ValueStack.Depth-2].cdl;
	}
        break;
      case 60: // ConstDeclarationsSect -> CONST, ConstDeclarations
{
		CurrentSemanticValue.cdl = ValueStack[ValueStack.Depth-1].cdl;
		CurrentSemanticValue.cdl.source_context = CurrentLocationSpan;
	}
        break;
      case 61: // VarDeclarationsSect -> VAR, VarDeclarations
{
		CurrentSemanticValue.vdss = ValueStack[ValueStack.Depth-1].vdss;
		CurrentSemanticValue.vdss.source_context = CurrentLocationSpan;
	}
        break;
      case 62: // DeclarationsSect -> VarDeclarationsSect
{
		CurrentSemanticValue.decsec = ValueStack[ValueStack.Depth-1].vdss;
	}
        break;
      case 63: // DeclarationsSect -> ConstDeclarationsSect
{
		CurrentSemanticValue.decsec = ValueStack[ValueStack.Depth-1].cdl;
	}
        break;
      case 64: // DeclarationsSect -> ProcedureDeclarationSect
{
		CurrentSemanticValue.decsec = ValueStack[ValueStack.Depth-1].pd;
	}
        break;
      case 65: // Declarations -> /* empty */
{
	  CurrentSemanticValue.decl = new declarations();
	}
        break;
      case 66: // Declarations -> Declarations, DeclarationsSect
{
		if (ValueStack[ValueStack.Depth-1].decsec != null)
			ValueStack[ValueStack.Depth-2].decl.Add(ValueStack[ValueStack.Depth-1].decsec);
		CurrentSemanticValue.decl = ValueStack[ValueStack.Depth-2].decl;
		CurrentSemanticValue.decl.source_context = CurrentLocationSpan;
	}
        break;
      case 67: // ProcedureDeclarationSect -> PROCEDURE, ident, maybeformalparams, maybereturn, 
               //                             SEMICOLUMN, mainblock, ident, SEMICOLUMN
{
	
	}
        break;
      case 68: // maybeformalparams -> /* empty */
{
		//$$ = null;
	}
        break;
      case 69: // maybeformalparams -> LPAREN, FPList, RPAREN
{
		//$$ = $2;
	}
        break;
      case 70: // maybereturn -> /* empty */
{
		
	}
        break;
      case 71: // maybereturn -> COMMA, type
{
	
	}
        break;
      case 72: // FPList -> FPSect
{
	
	}
        break;
      case 73: // FPList -> FPList, SEMICOLUMN, FPSect
{
	
	}
        break;
      case 74: // FPSect -> maybevar, IDList, COLON, type
{
	
	}
        break;
      case 75: // maybevar -> /* empty */
{
		CurrentSemanticValue.bVal = false;
	}
        break;
      case 76: // maybevar -> VAR
{
		CurrentSemanticValue.bVal = true;
	}
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
